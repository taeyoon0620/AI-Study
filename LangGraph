LangGraph는 LangChain 기반의 멀티 에이전트 프레임워크로, 비순차적(Non-linear) 대화 흐름을 구현할 수 있는 그래프 기반의 AI 오케스트레이션 라이브러리입니다.

🔥 LangGraph를 사용하면?
✅ 여러 LLM 에이전트를 협력하도록 구성 가능
✅ 동시 실행 가능한 비순차적 워크플로우 작성 가능
✅ LangChain과 완벽하게 호환됨

🚀 LangGraph 설치

pip install langgraph langchain openai
🌟 LangGraph 기본 개념
LangGraph는 크게 **노드(Node)와 엣지(Edge)**로 구성됩니다.

노드(Node): 하나의 작업(예: LLM 호출, 데이터 처리)
엣지(Edge): 노드를 연결하여 흐름을 제어
📝 예제 1: 간단한 LangGraph 워크플로우
👉 입력된 질문을 OpenAI GPT-4로 처리하는 기본 그래프


import os
import openai
import langgraph
from langchain.chat_models import ChatOpenAI
from langchain.schema import HumanMessage

# OpenAI API 키 설정
os.environ["OPENAI_API_KEY"] = "sk-XXXXXXX"

# LLM 초기화 (GPT-4 사용)
llm = ChatOpenAI(model_name="gpt-4", temperature=0)

# LangGraph 그래프 빌더 생성
builder = langgraph.Graph()

# 1️⃣ 입력을 받아 GPT-4에 전달하는 노드
def llm_node(inputs):
    response = llm.invoke([HumanMessage(content=inputs["question"])])
    return {"response": response.content}

# 노드 추가
builder.add_node("ask_gpt", llm_node)

# 2️⃣ 그래프 실행 경로 설정
builder.set_entry_point("ask_gpt")  # 시작점 지정
builder.add_edge("ask_gpt", "ask_gpt")  # 루프 가능 (예제용)

# 3️⃣ 그래프 실행기 생성
graph = builder.compile()

# 테스트 실행
result = graph.invoke({"question": "LangGraph가 뭐야?"})
print(result)
🔹 실행 결과:

arduino
복사
편집
{'response': 'LangGraph는 LangChain 기반의 그래프 오케스트레이션 라이브러리입니다...'}
🌟 예제 2: 멀티 에이전트 시스템 구현
👉 "질문 분석 → GPT-4 처리 → 결과 정리"의 멀티 노드 그래프

import os
import langgraph
from langchain.chat_models import ChatOpenAI
from langchain.schema import HumanMessage

# OpenAI API 키 설정
os.environ["OPENAI_API_KEY"] = "sk-XXXXXXX"

# LLM 초기화
llm = ChatOpenAI(model_name="gpt-4", temperature=0)

# LangGraph 그래프 빌더 생성
builder = langgraph.Graph()

# 1️⃣ 질문을 분석하는 노드
def analyze_question(inputs):
    question = inputs["question"]
    if "코딩" in question:
        return {"category": "coding", "question": question}
    else:
        return {"category": "general", "question": question}

builder.add_node("analyze_question", analyze_question)

# 2️⃣ GPT-4를 호출하는 노드
def ask_gpt(inputs):
    response = llm.invoke([HumanMessage(content=inputs["question"])])
    return {"response": response.content}

builder.add_node("ask_gpt", ask_gpt)

# 3️⃣ 결과를 정리하는 노드
def summarize_response(inputs):
    return {"summary": f"GPT-4의 답변: {inputs['response']}"}

builder.add_node("summarize_response", summarize_response)

# 4️⃣ 그래프 실행 경로 설정
builder.set_entry_point("analyze_question")
builder.add_edge("analyze_question", "ask_gpt")  # 질문 분석 후 GPT-4 호출
builder.add_edge("ask_gpt", "summarize_response")  # 응답을 요약

# 5️⃣ 그래프 실행기 생성
graph = builder.compile()

# 실행 테스트
result = graph.invoke({"question": "파이썬에서 클래스를 어떻게 사용하나요?"})
print(result)
🔹 실행 결과:

{'summary': 'GPT-4의 답변: 파이썬에서 클래스는 `class` 키워드를 사용하여 정의합니다...'}
🌟 응용 아이디어
LangGraph를 활용해 다양한 AI 시스템을 만들 수 있어요!
✅ AI 상담 챗봇 (질문 분석 → 감정 인식 → GPT 응답)
✅ 자동 코드 리뷰 시스템 (코드 분석 → 리팩토링 추천 → 스타일 체크)
✅ 멀티 에이전트 AI 협업 시스템 (기획 → 코딩 → 문서화 자동화)

LangGraph로 AI 워크플로우를 자동화하고 더 복잡한 AI 시스템을 만들어보세요! 🚀
추가 질문 있으면 편하게 물어봐 주세요. 😊







